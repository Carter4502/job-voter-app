{"version":3,"sources":["graphql/queries.js","aws-exports.js","Leaderboard.js","VotingOption.js","Vote.js","graphql/mutations.js","App.js","reportWebVitals.js","index.js"],"names":["listJobs","awsmobile","Amplify","configure","awsconfig","Leaderboard","StyledTableCell","styled","TableCell","theme","tableCellClasses","head","backgroundColor","color","palette","common","black","fontWeight","fontFamily","body","fontSize","useState","jobs","setJobs","filteredJobs","setFilteredJobs","searched","setSearched","filteredEmpty","setFilteredEmpty","useEffect","fetchJobs","requestSearch","searchedVal","filter","row","company","toLowerCase","startsWith","a","API","graphql","graphqlOperation","jobData","jobList","data","items","sort","el1","el2","elo","console","log","className","to","Button","variant","value","onChange","searchVal","onCancelSearch","placeholder","TableContainer","component","Paper","Table","sx","TableHead","TableRow","length","TableBody","map","job","idx","scope","salary","VotingOption","image","position","id","alt","src","EloRating","require","Vote","job1","setJob1","job2","setJob2","setVotingOptions","votedFor","vote","winner","loser","newWinnerElo","calculate","playerRating","newLoserElo","opponentRating","winningJob","losingJob","updateDB","newElo","createdAt","updatedAt","input","updateJob","j1","Math","floor","random","j2","pathname","state","onClick","imgURL","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1fe87867.chunk.js","sourcesContent":["/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const getJob = /* GraphQL */ `\n  query GetJob($id: ID!) {\n    getJob(id: $id) {\n      id\n      position\n      company\n      imgURL\n      elo\n      times\n      createdAt\n      updatedAt\n      salary\n    }\n  }\n`;\nexport const listJobs = /* GraphQL */ `\n  query ListJobs(\n    $filter: ModelJobFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listJobs(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        position\n        company\n        imgURL\n        elo\n        times\n        createdAt\n        updatedAt\n        salary\n      }\n      nextToken\n    }\n  }\n`;\n","/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-1\",\n    \"aws_appsync_graphqlEndpoint\": \"https://zsar4l2tkrgvvic33uugmxzmpy.appsync-api.us-east-1.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"us-east-1\",\n    \"aws_appsync_authenticationType\": \"API_KEY\",\n    \"aws_appsync_apiKey\": \"da2-as22gej4szeq3cz2mtbq7zushm\"\n};\n\n\nexport default awsmobile;\n","import React from 'react';\r\nimport Amplify, {API, graphqlOperation} from 'aws-amplify';\r\nimport {useState, useEffect} from 'react';\r\nimport {listJobs} from './graphql/queries';\r\nimport awsconfig from './aws-exports';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell, {tableCellClasses} from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport \"./Leaderboard.css\";\r\nimport { styled } from '@mui/material/styles';\r\nimport {Button} from 'react-bootstrap';\r\nimport {Link} from 'react-router-dom';\r\nimport SearchBar from \"material-ui-search-bar\";\r\n\r\nAmplify.configure(awsconfig);\r\n\r\nfunction Leaderboard() {\r\n    const StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n        [`&.${tableCellClasses.head}`]: {\r\n          backgroundColor: \"#F8F8F8\",\r\n          color: theme.palette.common.black,\r\n          fontWeight: 'bold',\r\n          fontFamily: 'Axiforma Bold'\r\n        },\r\n        [`&.${tableCellClasses.body}`]: {\r\n          fontSize: 16,\r\n          fontFamily: 'Nunito'\r\n        },\r\n      }));\r\n\r\n    const[jobs, setJobs] = useState([]);\r\n    const[filteredJobs, setFilteredJobs] = useState([]);\r\n    const[searched, setSearched] = useState(\"\");\r\n    const[filteredEmpty, setFilteredEmpty] = useState(true);\r\n    useEffect(() => {\r\n        fetchJobs();\r\n    }, [])\r\n    const requestSearch = (searchedVal) => {\r\n        \r\n      const filteredJobs = jobs.filter((row) => {\r\n        return row.company.toLowerCase().startsWith(searchedVal.toLowerCase())\r\n      })\r\n      setFilteredEmpty(false);\r\n      setFilteredJobs(filteredJobs);\r\n    };\r\n    \r\n    const cancelSearch = () => {\r\n        setSearched(\"\");\r\n        setFilteredEmpty(true);\r\n        requestSearch(searched);\r\n    };\r\n    const fetchJobs = async() => {\r\n        try {\r\n            const jobData = await API.graphql(graphqlOperation(listJobs));\r\n            const jobList = jobData.data.listJobs.items;\r\n            jobList.sort((el1, el2) => {return el2.elo - el1.elo});\r\n            setJobs(jobList);\r\n        } catch (error) {\r\n            console.log(\"Error fetching jobs.\", error);\r\n        }\r\n    }\r\n    return (\r\n            <div>\r\n                <div className=\"head3\">\r\n                <Link to=\"/\"><Button className=\"lb2\" variant='primary'>Contribute Votes</Button></Link>\r\n                </div>\r\n                <h1 className=\"leaderTitle\">Leaderboard</h1>\r\n            <div className = \"card2\">\r\n                <SearchBar\r\n            value={searched}\r\n            onChange={(searchVal) => requestSearch(searchVal)}\r\n            onCancelSearch={() => cancelSearch()}\r\n            className=\"searchBar\"\r\n            placeholder=\"Search a company\"\r\n            />\r\n            <div className=\"border\">\r\n            \r\n            <TableContainer component={Paper}>\r\n                <Table sx={{}} aria-label=\"simple table\">\r\n                    <TableHead>\r\n                    <TableRow>\r\n                    {(filteredEmpty || filteredJobs.length === jobs.length) &&<StyledTableCell>#</StyledTableCell>}\r\n                        <StyledTableCell>Company</StyledTableCell>\r\n                        <StyledTableCell>Pay</StyledTableCell>\r\n                        <StyledTableCell>Elo</StyledTableCell>\r\n                    </TableRow>\r\n                    </TableHead>\r\n                <TableBody>\r\n                {(filteredEmpty || filteredJobs.length === jobs.length) && jobs.map((job, idx) => (\r\n                    <TableRow\r\n                    key={job.company}\r\n                    >\r\n                    <StyledTableCell component=\"th\" scope=\"row\">\r\n                        {idx + 1}\r\n                        </StyledTableCell>\r\n                    <StyledTableCell component=\"th\" scope=\"row\">\r\n                        {job.company}\r\n                    </StyledTableCell>\r\n                    <StyledTableCell component=\"th\" scope=\"row\">${job.salary}/hr</StyledTableCell>\r\n                    <StyledTableCell component=\"th\" scope=\"row\">{job.elo}</StyledTableCell>\r\n                    </TableRow>\r\n                ))}\r\n                {!filteredEmpty && filteredJobs.length !== jobs.length && filteredJobs.map((job, idx) => (\r\n                    <TableRow\r\n                    key={job.company}\r\n                    >\r\n                    <StyledTableCell component=\"th\" scope=\"row\">\r\n                        {job.company}\r\n                    </StyledTableCell>\r\n                    <StyledTableCell component=\"th\" scope=\"row\">${job.salary}/hr</StyledTableCell>\r\n                    <StyledTableCell component=\"th\" scope=\"row\">{job.elo}</StyledTableCell>\r\n                    </TableRow>\r\n                ))}\r\n                </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            </div>\r\n            </div>\r\n            </div>\r\n            \r\n    );\r\n}\r\n\r\nexport default Leaderboard;","import './VotingOption.css';\r\n\r\nconst VotingOption = ({image, company, position, salary}) => {\r\n    return (\r\n        <div className = \"card\">\r\n        <div id=\"container\">\r\n        <span className=\"helper\"></span>\r\n        <img alt=\"company logo\" src={image} />\r\n        </div>\r\n        <h1 className = \"jobCompany\">{company}</h1>\r\n        <h1 className = \"jobTitle\">{position}</h1>\r\n        <h3 className = \"jobSalary\">${salary}/hr</h3>\r\n        </div>\r\n    )\r\n}\r\nexport default VotingOption","import React from 'react';\r\nimport VotingOption from './VotingOption';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {Button} from 'react-bootstrap';\r\nimport \"./Vote.css\"\r\nimport {Link} from 'react-router-dom';\r\nimport Amplify, {API, graphqlOperation} from 'aws-amplify';\r\nimport awsconfig from './aws-exports';\r\nimport {useState, useEffect} from 'react';\r\nimport {listJobs} from './graphql/queries';\r\nimport {updateJob} from './graphql/mutations';\r\n\r\nvar EloRating = require('elo-rating');\r\nAmplify.configure(awsconfig);\r\nfunction Vote() {\r\n    const[job1, setJob1] = useState(-1);\r\n    const[job2, setJob2] = useState(-1);\r\n    const[jobs, setJobs] = useState([]);\r\n    useEffect(() => {\r\n        fetchJobs();\r\n    }, [])\r\n    useEffect(() => {\r\n      setVotingOptions();\r\n      // eslint-disable-next-line\r\n    }, [jobs])\r\n    const fetchJobs = async() => {\r\n        console.log(\"fetched.\");\r\n        try {\r\n            const jobData = await API.graphql(graphqlOperation(listJobs));\r\n            const jobList = jobData.data.listJobs.items;\r\n            console.log('job list', jobList);\r\n            setJobs(jobList);\r\n        } catch (error) {\r\n            console.log(\"Error fetching jobs.\", error);\r\n        }\r\n    }\r\n    const votedFor = (vote) => {\r\n        var winner = vote === 1 ? job1:job2;\r\n        var loser = vote === 1 ? job2:job1;\r\n        const newWinnerElo = EloRating.calculate(jobs[winner].elo, jobs[loser].elo).playerRating;\r\n        const newLoserElo = EloRating.calculate(jobs[winner].elo, jobs[loser].elo).opponentRating;\r\n        const winningJob = jobs[winner];\r\n        const losingJob = jobs[loser];\r\n        updateDB(winningJob, newWinnerElo, winner);\r\n        updateDB(losingJob, newLoserElo, loser);\r\n    }\r\n    const updateDB = async(job, newElo, idx) => {\r\n      console.log(\"updated.\");\r\n      try {\r\n        job.elo = newElo;\r\n        delete job.createdAt;\r\n        delete job.updatedAt;\r\n        const jobData = await API.graphql(graphqlOperation(updateJob, {input: job}));\r\n        const jobList = [...jobs];\r\n        jobList[idx] = jobData.data.updateJob;\r\n        setJobs(jobList);\r\n      } catch (error) {\r\n        console.log('Error when updating elo in database.', error);\r\n      }\r\n    }\r\n    const setVotingOptions = () => {\r\n        if (jobs.length === 0) {\r\n          return;\r\n        }\r\n        var j1 = Math.floor(Math.random() * jobs.length);\r\n        var j2 = Math.floor(Math.random() * jobs.length);\r\n        while (j2 === j1) {\r\n          j2 = Math.floor(Math.random() * jobs.length);\r\n        }\r\n        setJob1(j1);\r\n        setJob2(j2);\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n      <div className=\"head\">\r\n      <Link to={{pathname: \"/leaderboard\", state: {jobs}}}><Button className=\"lb\" variant='primary'>Leaderboard</Button></Link>  \r\n      </div>\r\n      <h1 className=\"title\"> Which internship would you take? </h1>\r\n      <div className=\"container\">\r\n      {job1 !== -1 && <button className=\"voteButton\" onClick={() => votedFor(1)}><VotingOption image={jobs[job1].imgURL} company={jobs[job1].company} position={jobs[job1].position} salary={jobs[job1].salary}/> </button>}\r\n      {job2 !== -1 && <button className=\"voteButton\" onClick={() => votedFor(2)}><VotingOption image={jobs[job2].imgURL} company={jobs[job2].company} position={jobs[job2].position} salary={jobs[job2].salary}/></button>}\r\n      </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Vote;","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const createJob = /* GraphQL */ `\n  mutation CreateJob(\n    $input: CreateJobInput!\n    $condition: ModelJobConditionInput\n  ) {\n    createJob(input: $input, condition: $condition) {\n      id\n      position\n      company\n      imgURL\n      elo\n      times\n      createdAt\n      updatedAt\n      salary\n    }\n  }\n`;\nexport const updateJob = /* GraphQL */ `\n  mutation UpdateJob(\n    $input: UpdateJobInput!\n    $condition: ModelJobConditionInput\n  ) {\n    updateJob(input: $input, condition: $condition) {\n      id\n      position\n      company\n      imgURL\n      elo\n      times\n      createdAt\n      updatedAt\n      salary\n    }\n  }\n`;\nexport const deleteJob = /* GraphQL */ `\n  mutation DeleteJob(\n    $input: DeleteJobInput!\n    $condition: ModelJobConditionInput\n  ) {\n    deleteJob(input: $input, condition: $condition) {\n      id\n      position\n      company\n      imgURL\n      elo\n      times\n      createdAt\n      updatedAt\n    }\n  }\n`;\n","import React from 'react'\nimport Leaderboard from './Leaderboard.js';\nimport {Route} from 'react-router-dom';\nimport Vote from './Vote.js'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route exact path={[\"/\",\"/vote\"]} component={Vote} />\n      <Route exact path=\"/leaderboard\" component={Leaderboard} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter><App /></BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}